plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
}

group = 'com.nakahama'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'org.postgresql:postgresql'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    compileOnly("org.projectlombok:lombok:1.18.26")
	annotationProcessor('org.projectlombok:lombok:1.18.26')
	implementation 'jakarta.xml.bind:jakarta.xml.bind-api-parent:4.0.0'
	implementation 'org.springframework.boot:spring-boot-starter-validation:2.7.3'
	implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.2'
	implementation("io.jsonwebtoken:jjwt:0.12.3")
	implementation 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'
	implementation 'org.mapstruct:mapstruct:1.4.2.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.test {
   useJUnitPlatform()
   finalizedBy(tasks.jacocoTestReport) // report is always generated after tests run
}
tasks.jacocoTestReport {
   afterEvaluate {
       classDirectories.setFrom(files(classDirectories.files.collect {
           fileTree(dir: it, exclude: ['**/*Application**'])
       }))
   }
   dependsOn(tasks.test) // tests are required to run before generating the report
   reports {
       xml.required.set(false)
       csv.required.set(false)
       html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
   }
}
