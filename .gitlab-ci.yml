# before_script:
#   - curl -fsSl https://get.docker.com -o get-docker.sh
#   - sudo sh ./get-docker.sh
#   - sudo usermod -aG docker $USER
#   - docker -v

variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  POSTGRES_DB: simpen
  POSTGRES_HOST: postgres
  POSTGRES_PORT: 5432
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  REGISTRY_USER: $REGISTRY_USER
  IMAGE_NAME: $IMAGE_NAME
  IMAGE_TAG: latest
  CONTAINER_NAME: $CONTAINER_NAME
  GCP_USERNAME: $GCP_USERNAME
  GCP_STATIC_IP: $GCP_STATIC_IP

stages:
  - build
  - test
  - publish
  - deploy

Build:
  stage: build
  image: gradle:jdk17-alpine
  before_script:
    - echo `pwd`
    - export GRADLE_USER_HOME=`pwd`/.gradle
  script:
    - gradle wrapper
    - ./gradlew assemble
    - ls
  artifacts:
    when: always
    paths:
      - build/libs/*.jar
    expire_in: 1 week

Test:
  stage: test
  image: gradle:jdk17-alpine
  dependencies:
    - Build
  services:
    - "postgres:latest"
  before_script:
    - echo `pwd`
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - export SPRING_PROFILES_ACTIVE=test
  script:
    - echo "testing goes here"
  #   - gradle check --info --stacktrace
  #   - gradle test
  #   - gradle jacocoTestReport
  #   - grep -Eo "Total.*?([0-9]{1,3})%" build/jacocoHtml/index.html
  # artifacts:
  #   when: always
  #   reports:
  #     junit: build/test-results/test/**/TEST-*.xml
  # coverage: "/Total.*?([0-9]{1,3})%/"

Publish:
  stage: publish
  image: docker:latest
  services:
    - docker:dind
  dependencies:
    - Build
  before_script:
    - echo $DOCKER_PASSWORD| docker login -u $REGISTRY_USER --password-stdin docker.io
  script:
    - ls
    - docker build
      --build-arg PRODUCTION=$PRODUCTION
      --build-arg JDBC_DATABASE_PASSWORD=$JDBC_DATABASE_PASSWORD
      --build-arg JDBC_DATABASE_URL=$JDBC_DATABASE_URL
      --build-arg JDBC_DATABASE_USERNAME=$JDBC_DATABASE_USERNAME
      -t nakahamalabs465/simpen-backend:latest .
    - docker push nakahamalabs465/simpen-backend:latest
  tags:
    - dind
  only:
    - main

Deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - chmod 400 $SSH_KEY
    - apk update && apk add openssh-client
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_KEY $GCP_USERNAME@$GCP_STATIC_IP "
      docker container rm -f $CONTAINER_NAME || true &&
      docker image rm -f nakahamalabs465/simpen-backend:latest || true &&
      docker run --name $CONTAINER_NAME -d --network mynetwork -p 8080:8080 nakahamalabs465/simpen-backend:latest"
  only:
    - main
